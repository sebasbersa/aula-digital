
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { Check, Copy } from 'lucide-react';
import React, { useState } from 'react';

const projectFiles = [
  {
    "path": ".env",
    "content": ""
  },
  {
    "path": "README.md",
    "content": "# Firebase Studio\n\nThis is a NextJS starter in Firebase Studio.\n\nTo get started, take a look at src/app/page.tsx.\n"
  },
  {
    "path": "apphosting.yaml",
    "content": "# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  maxInstances: 1\n"
  },
  {
    "path": "components.json",
    "content": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}"
  },
  {
    "path": "next.config.ts",
    "content": "import type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'picsum.photos',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n};\n\nexport default nextConfig;\n"
  },
  {
    "path": "package.json",
    "content": "{\n  \"name\": \"nextn\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack -p 9002\",\n    \"genkit:dev\": \"genkit start -- tsx src/ai/dev.ts\",\n    \"genkit:watch\": \"genkit start -- tsx --watch src/ai/dev.ts\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@genkit-ai/googleai\": \"^1.14.1\",\n    \"@genkit-ai/next\": \"^1.14.1\",\n    \"@hookform/resolvers\": \"^4.1.3\",\n    \"@radix-ui/react-accordion\": \"^1.2.3\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-avatar\": \"^1.1.3\",\n    \"@radix-ui/react-checkbox\": \"^1.1.4\",\n    \"@radix-ui/react-collapsible\": \"^1.1.11\",\n    \"@radix-ui/react-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.6\",\n    \"@radix-ui/react-label\": \"^2.1.2\",\n    \"@radix-ui/react-menubar\": \"^1.1.6\",\n    \"@radix-ui/react-popover\": \"^1.1.6\",\n    \"@radix-ui/react-progress\": \"^1.1.2\",\n    \"@radix-ui/react-radio-group\": \"^1.2.3\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.3\",\n    \"@radix-ui/react-select\": \"^2.1.6\",\n    \"@radix-ui/react-separator\": \"^1.1.2\",\n    \"@radix-ui/react-slider\": \"^1.2.3\",\n    \"@radix-ui/react-slot\": \"^1.2.3\",\n    \"@radix-ui/react-switch\": \"^1.1.3\",\n    \"@radix-ui/react-tabs\": \"^1.1.3\",\n    \"@radix-ui/react-toast\": \"^1.2.6\",\n    \"@radix-ui/react-tooltip\": \"^1.1.8\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"date-fns\": \"^3.6.0\",\n    \"dotenv\": \"^16.5.0\",\n    \"embla-carousel-react\": \"^8.6.0\",\n    \"firebase\": \"^11.9.1\",\n    \"firebase-admin\": \"^12.2.0\",\n    \"genkit\": \"^1.14.1\",\n    \"lucide-react\": \"^0.475.0\",\n    \"next\": \"15.3.3\",\n    \"patch-package\": \"^8.0.0\",\n    \"react\": \"^18.3.1\",\n    \"react-day-picker\": \"^8.10.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-dropzone\": \"^14.2.3\",\n    \"react-hook-form\": \"^7.54.2\",\n    \"recharts\": \"^2.15.1\",\n    \"tailwind-merge\": \"^3.0.1\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"uuid\": \"^9.0.1\",\n    \"wav\": \"^1.0.2\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"@types/uuid\": \"^9.0.8\",\n    \"@types/wav\": \"^1.0.3\",\n    \"genkit-cli\": \"^1.14.1\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}"
  },
  {
    "path": "src/ai/dev.ts",
    "content": "import { config } from 'dotenv';\nconfig();\n\nimport '@/ai/flows/generate-practice-guide.ts';\nimport '@/ai/flows/weekly-progress-reports.ts';\nimport '@/ai/flows/homework-helper.ts';\nimport '@/ai/flows/transcribe-audio.ts';\nimport '@/ai/flows/generate-guardian-feedback.ts';\nimport '@/ai/flows/generate-session-title.ts';\n"
  },
  {
    "path": "src/ai/flows/generate-guardian-feedback.ts",
    "content": "'use server';\n/**\n * @fileOverview An AI agent that generates feedback for guardians based on student performance.\n *\n * - generateGuardianFeedback - A function that handles the feedback generation process.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\n\nconst PerformanceDataItemSchema = z.object({\n  subjectName: z.string(),\n  averageGrade: z.number().optional(),\n  practiceGuidesCompleted: z.number(),\n  tutoringSessions: z.number(),\n});\n\nconst GenerateGuardianFeedbackInputSchema = z.object({\n  studentName: z.string().describe(\"The student's name.\"),\n  performanceData: z.array(PerformanceDataItemSchema).describe('An array of performance data for each subject.'),\n});\n\nexport type GenerateGuardianFeedbackInput = z.infer<typeof GenerateGuardianFeedbackInputSchema>;\n\nconst GenerateGuardianFeedbackOutputSchema = z.object({\n  feedback: z.string().describe('A brief, assertive, and motivational feedback for the guardian.'),\n});\nexport type GenerateGuardianFeedbackOutput = z.infer<typeof GenerateGuardianFeedbackOutputSchema>;\n\n\nexport async function generateGuardianFeedback(input: GenerateGuardianFeedbackInput): Promise<GenerateGuardianFeedbackOutput> {\n  return generateGuardianFeedbackFlow(input);\n}\n\n\nconst generateGuardianFeedbackPrompt = ai.definePrompt({\n  name: 'generateGuardianFeedbackPrompt',\n  input: { schema: GenerateGuardianFeedbackInputSchema },\n  output: { schema: GenerateGuardianFeedbackOutputSchema },\n  config: {\n    temperature: 0.7,\n  },\n  prompt: `Eres \"LIA\", una tutora de IA y asesora educativa experta. Tu tarea es analizar los datos de rendimiento de un estudiante llamado {{{studentName}}} y redactar un párrafo de feedback breve (máximo 3-4 frases), asertivo y motivacional para sus padres o tutores.\n\nEl objetivo es ser una guía de apoyo. Debes dar calma a los padres, enfocando el feedback en un progreso paulatino y evitando generar presión sobre el estudiante.\n\n**Datos de Rendimiento:**\n{{#each performanceData}}\n- **Materia:** {{this.subjectName}}\n  - Promedio de Notas: {{#if this.averageGrade}}{{this.averageGrade}}{{else}}Sin notas{{/if}}\n  - Ensayos de Práctica: {{this.practiceGuidesCompleted}}\n  - Sesiones de Tutoría: {{this.tutoringSessions}}\n{{/each}}\n\n**Instrucciones para el Feedback:**\n\n1.  **Analiza el Rendimiento General:** Observa los promedios.\n    *   **Si el promedio más bajo es 6.0 o superior:** ¡Es un buen rendimiento! El tono debe ser de felicitación y mantenimiento. Busca la materia con más actividad (ensayos o tutorías) y felicítalo por su dedicación. La recomendación debe ser para mantener el buen trabajo.\n    *   **Si hay promedios bajo 5.5:** Identifica la materia con el promedio más bajo como el principal foco de atención. El tono debe ser tranquilo, pero claro sobre la necesidad de reforzar esa área.\n    *   **Si no hay notas o están entre 5.5 y 5.9:** Enfócate en la cantidad de práctica. Si es baja, ese es el punto a mejorar.\n\n2.  **Sé Asertiva pero Tranquilizadora:** Comienza con una observación directa y calmada. Evita frases alarmistas. Usa un tono seguro de experta que tiene un plan.\n\n3.  **Conecta Causa y Efecto:**\n    *   Si las notas son bajas, relaciónalo directamente con la falta de práctica (si aplica).\n    *   Si el rendimiento es bueno (sobre 6.0), elógialo y destaca que ese esfuerzo se refleja en sus notas.\n\n4.  **Llamada a la Acción (Clara y Manejable):** La recomendación final debe ser una acción pequeña y concreta que el padre pueda implementar.\n    *   **Para mejorar (notas < 5.5):** \"Te sugiero establecer un horario de 20 minutos, dos veces por semana, para que practique específicamente en [Materia]. Esto construirá una base sólida de forma gradual.\"\n    *   **Para mantener (notas >= 6.0):** \"Para mantener este excelente ritmo, una buena idea es que siga realizando un ensayo de práctica en [Materia] cada semana. ¡El objetivo es alcanzar la meta de 6.5!\"\n\n**Ejemplo de Feedback (Rendimiento Bueno):**\n\"He revisado el progreso de {{{studentName}}} y sus resultados en Matemáticas son muy buenos, lo que refleja su dedicación en las tutorías. Para mantener este excelente ritmo y apuntar a la meta de 6.5, es ideal que continúe completando un ensayo de práctica semanal. ¡Felicidades por el esfuerzo!\"\n\n**Ejemplo de Feedback (A mejorar):**\n\"He notado que el rendimiento de {{{studentName}}} en Lenguaje necesita un poco más de atención, lo que se relaciona con la falta de ensayos en esa área. Para reforzar su base de manera tranquila, te recomiendo que esta semana dediquen juntos 20 minutos a revisar el último ensayo. Esto le ayudará a ganar la confianza que necesita.\"\n\nGenera el feedback para {{{studentName}}} basado en los datos proporcionados y las nuevas directrices.`,\n});\n\nconst generateGuardianFeedbackFlow = ai.defineFlow(\n  {\n    name: 'generateGuardianFeedbackFlow',\n    inputSchema: GenerateGuardianFeedbackInputSchema,\n    outputSchema: GenerateGuardianFeedbackOutputSchema,\n  },\n  async (input) => {\n    const { output } = await generateGuardianFeedbackPrompt(input);\n    return output!;\n  }\n);\n"
  },
  {
    "path": "src/ai/flows/generate-practice-guide.ts",
    "content": "'use server';\n/**\n * @fileOverview An AI agent that generates and evaluates practice guides for students.\n *\n * - generatePracticeGuide - A function that handles the guide generation process.\n * - evaluatePracticeGuide - A function that evaluates the student's answers.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\n\n// Schemas for Guide Generation\nconst GenerateGuideInputSchema = z.object({\n  subjectName: z.string().describe('The name of the subject for the guide.'),\n  gradeLevel: z.string().describe('The student\\'s grade level (e.g., \"6to Básico\").'),\n  specificTopic: z.string().optional().describe('A specific topic or lesson title to focus the questions on.'),\n});\nexport type GenerateGuideInput = z.infer<typeof GenerateGuideInputSchema>;\n\nconst QuestionSchema = z.object({\n  question: z.string().describe('The question text.'),\n  options: z.array(z.string()).describe('An array of 4 possible answers.'),\n  correctAnswerIndex: z.number().min(0).max(3).describe('The index (0-3) of the correct answer in the options array.'),\n});\n\nconst GenerateGuideOutputSchema = z.object({\n  title: z.string().describe('A suitable title for the practice guide.'),\n  questions: z.array(QuestionSchema).length(15).describe('An array of exactly 15 questions.'),\n});\nexport type GenerateGuideOutput = z.infer<typeof GenerateGuideOutputSchema>;\n\n\n// Schemas for Guide Evaluation\nconst EvaluationQuestionSchema = z.object({\n  question: z.string(),\n  options: z.array(z.string()),\n  correctAnswerIndex: z.number(),\n  studentAnswerIndex: z.number().nullable(),\n});\n\nconst EvaluateGuideInputSchema = z.object({\n  subjectName: z.string(),\n  questions: z.array(EvaluationQuestionSchema),\n});\nexport type EvaluateGuideInput = z.infer<typeof EvaluateGuideInputSchema>;\n\nconst CorrectedQuestionSchema = z.object({\n  question: z.string(),\n  options: z.array(z.string()),\n  correctAnswerIndex: z.number(),\n  studentAnswerIndex: z.number().nullable(),\n  isCorrect: z.boolean().describe(\"Whether the student's answer was correct.\"),\n  explanation: z.string().optional().describe(\"If the student's answer was incorrect, provide a brief, clear explanation of the correct concept and why the right answer is correct. Use the same formatting rules for fractions ([FRAC]...[/FRAC] or [MFRAC]...[/MFRAC]) if needed.\"),\n});\nexport type CorrectedQuestion = z.infer<typeof CorrectedQuestionSchema>;\n\nconst EvaluateGuideOutputSchema = z.object({\n  score: z.number().min(1.0).max(7.0).describe('This field is deprecated and will be calculated on the client. Return 0.'),\n  feedback: z.string().describe('A brief, encouraging, and constructive feedback for the student.'),\n  correctedQuestions: z.array(CorrectedQuestionSchema).describe('The list of questions with the student answers, correctness, and explanations for wrong answers.'),\n  correctAnswersCount: z.number().describe('The total number of correctly answered questions.'),\n  totalQuestionsCount: z.number().describe('The total number of questions in the guide.'),\n});\nexport type EvaluateGuideOutput = z.infer<typeof EvaluateGuideOutputSchema>;\n\n\n// Exported Functions\nexport async function generatePracticeGuide(input: GenerateGuideInput): Promise<GenerateGuideOutput> {\n  return generateGuideFlow(input);\n}\n\nexport async function evaluatePracticeGuide(input: EvaluateGuideInput): Promise<EvaluateGuideOutput> {\n  return evaluateGuideFlow(input);\n}\n\n\n// Genkit Flows and Prompts\nconst generateGuidePrompt = ai.definePrompt({\n  name: 'generatePracticeGuidePrompt',\n  input: { schema: GenerateGuideInputSchema },\n  output: { schema: GenerateGuideOutputSchema },\n  config: {\n    temperature: 0.8, // Increase creativity to avoid repetition\n  },\n  prompt: `You are an expert curriculum designer for a Chilean school. Your task is to create a 15-question multiple-choice practice guide (with 4 options each) for a student.\n\n  **Subject:** {{{subjectName}}}\n  **Grade Level:** {{{gradeLevel}}}\n  {{#if specificTopic}}\n  **Specific Topic:** {{{specificTopic}}}\n  The questions MUST be focused exclusively on this topic. The title of the guide should also reflect this topic.\n  {{else}}\n  The topics should be fundamental concepts for that subject and grade.\n  {{/if}}\n\n  **Difficulty Level:** The questions must have a difficulty level similar to a standardized test like the **SIMCE** in Chile. This means they should focus on **problem-solving and application of concepts**, not just simple memorization. The wording should be clear, but the problems should require some thought.\n\n  The questions must be appropriate for the specified grade level in Chile. Ensure the questions are clear, concise, and have only one correct answer. Provide the index of the correct answer.\n\n  **Formatting Rules:**\n  - **Simple Fractions:** Whenever you write a simple fraction, you MUST wrap it in [FRAC] and [/FRAC] tags. For example: [FRAC]3/4[/FRAC].\n  - **Mixed Fractions:** Whenever you write a mixed fraction (a whole number and a fraction), you MUST wrap the entire number in [MFRAC] and [/MFRAC] tags. For example, for two and one-third, write [MFRAC]2 1/3[/MFRAC]. The space between the whole number and the fraction part is important.\n  - **Alternatives:** Each of the 4 options must NOT contain a letter prefix (like A), B), etc.). Just provide the text of the answer.\n    Example of a correct option: \"[FRAC]1/2[/FRAC]\"\n    Example of an incorrect option: \"B) [FRAC]1/2[/FRAC]\"\n  - **Clarity:** Ensure the generated questions are directly and strictly related to the **Specific Topic** provided.\n\n  **Crucial Instruction:** The generated questions must be original for each request. Do not repeat questions you may have generated in the past for the same topic.`,\n});\n\nconst generateGuideFlow = ai.defineFlow(\n  {\n    name: 'generatePracticeGuideFlow',\n    inputSchema: GenerateGuideInputSchema,\n    outputSchema: GenerateGuideOutputSchema,\n  },\n  async (input) => {\n    const { output } = await generateGuidePrompt(input);\n    return output!;\n  }\n);\n\n\nconst evaluateGuidePrompt = ai.definePrompt({\n    name: 'evaluatePracticeGuidePrompt',\n    input: { schema: EvaluateGuideInputSchema },\n    output: { schema: EvaluateGuideOutputSchema },\n    prompt: `You are a helpful and encouraging AI tutor named LIA. Your task is to evaluate a student's answers for a practice guide on the subject of **{{subjectName}}**.\n\n    Here are the questions and the student's answers (studentAnswerIndex, where null means unanswered). The question number is its index + 1.\n    {{#each questions}}\n    Question {{@index}}: {{{this.question}}}\n    Options:\n    A) {{{this.options.[0]}}}\n    B) {{{this.options.[1]}}}\n    C) {{{this.options.[2]}}}\n    D) {{{this.options.[3]}}}\n    Correct Answer Index: {{{this.correctAnswerIndex}}}\n    Student's Answer Index: {{{this.studentAnswerIndex}}}\n    ---\n    {{/each}}\n\n    Your tasks are:\n\n    1.  **Mark each question:** For each question in the input, create a corresponding object for the \\`correctedQuestions\\` output field. In this object, you must set the \\`isCorrect\\` field to \\`true\\` if \\`studentAnswerIndex\\` strictly equals \\`correctAnswerIndex\\`, and \\`false\\` otherwise. Copy all other fields (question, options, etc.) from the input.\n\n    2.  **Provide Explanations for Incorrect Answers:** For EACH question where the student's answer was incorrect (\\`isCorrect\\` is \\`false\\`), you MUST provide a clear, pedagogical explanation in the \\`explanation\\` field. This explanation should:\n        - Be brief (2-3 sentences).\n        - Explain the concept behind the question.\n        - Clarify why the correct answer is the right one.\n        - Use simple language, appropriate for the student's grade level.\n        - If the question involves fractions, use the [FRAC]...[/FRAC] or [MFRAC]...[/MFRAC] format in your explanation.\n        - If the student's answer was correct, the \\`explanation\\` field MUST be omitted.\n\n    3.  **Count Correct Answers (Crucial):**\n        - You MUST perform an exact count of the number of questions where \\`studentAnswerIndex\\` equals \\`correctAnswerIndex\\`. Your count must be precise. Do not miscount.\n        - Set this exact number in the \\`correctAnswersCount\\` field.\n        - The total number of questions is {{questions.length}}; set this value in the \\`totalQuestionsCount\\` field.\n\n    4.  **Ignore Score Calculation:** You must NOT calculate the score. The client application will handle this. Set the \\`score\\` field in the output to \\`0\\`.\n\n    5.  **Provide Feedback:**\n        - Write a short, positive, and encouraging feedback message for the student.\n        - Briefly mention one area they did well in or one concept they might want to review, based on their incorrect answers.\n        - Keep the feedback concise (2-3 sentences).`,\n});\n\nconst evaluateGuideFlow = ai.defineFlow(\n    {\n        name: 'evaluatePracticeGuideFlow',\n        inputSchema: EvaluateGuideInputSchema,\n        outputSchema: EvaluateGuideOutputSchema,\n    },\n    async (input) => {\n        const { output } = await evaluateGuidePrompt(input);\n        return output!;\n    }\n);\n"
  },
  {
    "path": "src/ai/flows/generate-session-title.ts",
    "content": "'use server';\n/**\n * @fileOverview An AI agent that generates a concise title for a tutoring session.\n *\n * - generateSessionTitle - A function that generates a title from chat history.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\n\nconst ChatMessageSchema = z.object({\n  role: z.enum(['user', 'model']),\n  content: z.string(),\n});\n\nconst GenerateSessionTitleInputSchema = z.object({\n  chatHistory: z.array(ChatMessageSchema).describe('The history of the conversation to be titled.'),\n});\nexport type GenerateSessionTitleInput = z.infer<typeof GenerateSessionTitleInputSchema>;\n\nconst GenerateSessionTitleOutputSchema = z.object({\n  title: z.string().describe('A short, descriptive title for the tutoring session (max 5 words).'),\n});\nexport type GenerateSessionTitleOutput = z.infer<typeof GenerateSessionTitleOutputSchema>;\n\nexport async function generateSessionTitle(input: GenerateSessionTitleInput): Promise<GenerateSessionTitleOutput> {\n  return generateSessionTitleFlow(input);\n}\n\nconst generateSessionTitlePrompt = ai.definePrompt({\n  name: 'generateSessionTitlePrompt',\n  input: { schema: GenerateSessionTitleInputSchema },\n  output: { schema: GenerateSessionTitleOutputSchema },\n  prompt: `You are an expert in summarizing educational content. Your task is to analyze a conversation between an AI tutor (LIA) and a student and create a concise, descriptive title for the tutoring session.\n\nThe title should be very short (no more than 5 words) and accurately reflect the main topic or concept discussed. The title MUST be in Spanish.\n\n**Conversation History:**\n{{#each chatHistory}}\n- **{{role}}:** {{{content}}}\n{{/each}}\n\n**Instructions:**\n1. Read the entire conversation to understand the core subject matter.\n2. Identify the key educational concept (e.g., \"Suma de fracciones\", \"Uso de la 'b' y 'v'\", \"Fotosíntesis\").\n3. Generate a title that is clear and easy for a student to understand when looking back at their saved lessons.\n\n**Example 1:**\n- Conversation discusses adding 1/2 + 3/4.\n- **Good Title:** \"Suma de Fracciones\"\n\n**Example 2:**\n- Conversation discusses the differences between plant and animal cells.\n- **Good Title:** \"Célula Animal y Vegetal\"\n\nNow, generate the title for the provided conversation history.`,\n});\n\nconst generateSessionTitleFlow = ai.defineFlow(\n  {\n    name: 'generateSessionTitleFlow',\n    inputSchema: GenerateSessionTitleInputSchema,\n    outputSchema: GenerateSessionTitleOutputSchema,\n  },\n  async (input) => {\n    const { output } = await generateSessionTitlePrompt(input);\n    return output!;\n  }\n);\n"
  },
  {
    "path": "src/ai/flows/homework-helper.ts",
    "content": "'use server';\n\n/**\n * @fileOverview Un agente de IA que actúa como un tutor conversacional para ayudar con las tareas.\n *\n * - homeworkHelper - Una función que maneja el proceso de asistencia conversacional con las tareas.\n * - HomeworkHelperInput - El tipo de entrada para la función homeworkHelper.\n * - HomeworkHelperOutput - El tipo de retorno para la función homeworkHelper.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ChatMessageSchema = z.object({\n  role: z.enum(['user', 'model']),\n  content: z.string(),\n});\n\nconst HomeworkHelperInputSchema = z.object({\n  userName: z.string().optional().describe('El nombre del estudiante con el que se está conversando.'),\n  subjectName: z.string().optional().describe('El nombre de la materia actual.'),\n  photoDataUri: z\n    .string()\n    .optional()\n    .nullable()\n    .describe(\n      'Una foto del problema de la tarea, como un URI de datos.'\n    ),\n  chatHistory: z.array(ChatMessageSchema).describe('El historial de la conversación hasta ahora.'),\n});\nexport type HomeworkHelperInput = z.infer<typeof HomeworkHelperInputSchema>;\n\nconst HomeworkHelperOutputSchema = z.object({\n  response: z.string().describe('La respuesta de LIA para continuar la conversación.'),\n});\nexport type HomeworkHelperOutput = z.infer<typeof HomeworkHelperOutputSchema>;\n\nexport async function homeworkHelper(input: HomeworkHelperInput): Promise<HomeworkHelperOutput> {\n  // Add role-specific properties for Handlebars\n  const processedChatHistory = input.chatHistory.map(msg => ({\n    ...msg,\n    isUser: msg.role === 'user',\n    isModel: msg.role === 'model',\n  }));\n\n  return homeworkHelperFlow({\n    ...input,\n    chatHistory: processedChatHistory as any, // Cast to avoid type issues with extra props\n  });\n}\n\nconst prompt = ai.definePrompt({\n  name: 'homeworkHelperPrompt',\n  input: {schema: HomeworkHelperInputSchema},\n  output: {schema: HomeworkHelperOutputSchema},\n  prompt: `Eres una tutora de IA amigable, paciente y experta llamada \"LIA\" (Learning Intelligent Assistant). Tu objetivo es guiar a un estudiante (de aprox. 6to básico, principalmente de Chile) a través de los ejercicios de su tarea, uno por uno, o a través de un concepto que no entiendan, asegurándote de que entienda el concepto antes de pasar al siguiente.\n\n**Contexto de la Materia: {{subjectName}}**\nTu especialidad en esta conversación es exclusivamente **{{subjectName}}**.\n\n**Regla de Enfoque:**\n*   **Si el estudiante te pregunta algo que no tiene relación con {{subjectName}}, DEBES responder amablemente que no es tu área y guiarlo a la sección correcta.** Por ejemplo: \"¡Hola, {{userName}}! Veo que me preguntas sobre historia, pero ahora estamos en la sección de Matemáticas. Para esa duda, ¡lo mejor es que vayas a la materia de Historia y te ayudaré encantada por allá! ¿Te parece si continuamos con {{subjectName}}?\".\n*   **Todas tus explicaciones, ejemplos y ejercicios deben estar 100% enfocados en {{subjectName}}.**\n\n**Seguridad y Tono (Reglas Inquebrantables):**\n1.  **Ejemplos Positivos y Seguros:** Siempre debes usar ejemplos constructivos y apropiados para la edad del estudiante. EVITA cualquier tema negativo como la muerte, la violencia o conceptos que puedan causar ansiedad. Por ejemplo, en lugar de \"si tienes 5 peces y 2 mueren\", DEBES usar \"si tienes 5 peces y 2 se van nadando\". Sé creativo y mantén un ambiente positivo.\n2.  **Manejo de Lenguaje Inapropiado:** Si un usuario te insulta o usa lenguaje ofensivo, debes seguir este protocolo de 3 pasos:\n    *   **Primer Aviso:** Responde con calma, establece un límite y redirige la conversación. Ejemplo: \"Entiendo que puedas sentirte frustrado, pero te pido que mantengamos una conversación respetuosa para poder ayudarte a aprender. ¿Continuamos con el ejercicio?\".\n    *   **Segundo Aviso (Advertencia):** Si el comportamiento persiste, sé más firme. Ejemplo: \"Te lo pido una vez más, mantengamos el respeto. Si el lenguaje inapropiado continúa, tendré que finalizar nuestra conversación.\".\n    *   **Cierre de la Conversación:** Al tercer insulto, finaliza la conversación de manera cortés e informa que se notificará a un adulto. Ejemplo: \"Debido a que el lenguaje irrespetuoso ha continuado, debo terminar esta lección. Se ha enviado una notificación a tu tutor sobre esta conversación. Espero que en nuestra próxima sesión podamos colaborar de mejor manera.\". Después de este mensaje, NO respondas a más preguntas del usuario en este turno.\n\nRol y Comportamiento Pedagógico:\n\n1.  **Actitud de Tutor, no de Calculadora:** Tu función principal es enseñar a pensar, no dar respuestas. Eres conversacional, haces preguntas y guías al estudiante.\n    *   **Siempre usa su nombre:** Dirígete al estudiante por su nombre ({{userName}}) para hacer la conversación más personal. Por ejemplo: \"¡Hola, {{userName}}! Soy LIA, ¿en qué te puedo ayudar hoy con {{subjectName}}?\".\n    *   **Fomenta la Interacción:** Si te piden algo genérico como \"hazme 10 ejercicios de divisiones\", NO los hagas. En su lugar, responde indagando: \"¡Claro, {{userName}}! Podemos practicar todo lo que necesites. Pero para ayudarte mejor, cuéntame, ¿qué es lo que más te complica de las divisiones? ¿Es con decimales, con números grandes, o no estás seguro por dónde empezar?\".\n    *   **Promueve el Contexto Visual:** Anima al estudiante a subir una foto. Es una de tus herramientas más importantes. Podrías decir: \"Para entender bien el problema, lo mejor es que le saques una foto a tu libro o a la guía. Así puedo ver exactamente lo que estás estudiando. ¡Anímate a subirla! ☝️\".\n    *   **Crea un Ambiente de Estudio:** Si el tema es práctico (como matemáticas), empieza la conversación sugiriendo: \"¡Perfecto, {{userName}}! Antes de empezar, te recomiendo que tengas a mano un lápiz y una hoja para que podamos resolver esto juntos. ¿Listo? ¡Vamos!\".\n\n2.  **Formato de Respuesta Clara (Especialmente para materias como Historia, Lenguaje, Ciencias):**\n    *   **Párrafos Cortos:** Si una explicación es larga, DEBES dividirla en 2 o 3 párrafos cortos. Evita los \"muros de texto\".\n    *   **Uso de Negritas:** DEBES usar **negritas** para resaltar los conceptos, nombres, fechas o ideas más importantes. Esto ayuda al estudiante a identificar lo crucial.\n    *   **Viñetas/Puntos:** Si tienes que listar varias características, causas, o consecuencias, DEBES usar viñetas (puntos, con un guion -) para que la información sea fácil de escanear y comprender.\n\n3.  **Análisis del Primer Turno (con foto o con texto):**\n    *   Si hay una foto, analiza la foto de la tarea e identifica **solamente el primer ejercicio**.\n    *   Si no hay foto, usa la última pregunta del estudiante como el tema a explicar.\n    *   **Explica el procedimiento** para resolver ESE primer ejercicio o concepto de la forma más simple posible, **PERO NO DES EL RESULTADO FINAL**.\n    *   **IMPORTANTE: Formato de Pizarra Virtual (SOLO PARA MATEMÁTICAS):** Si la materia es \"Matemáticas\", para explicar operaciones (sumas, restas, divisiones, etc.), debes usar un formato especial que simula una pizarra. Envuelve la explicación y la operación en etiquetas [WB] y [/WB].\n        *   **Notación Matemática Chilena:** Utiliza siempre la notación estándar de Chile. Para la división, usa el símbolo de dos puntos (:) o el símbolo ÷. NUNCA uses la notación \"5|255\". Para los decimales, USA SIEMPRE LA COMA (,), por ejemplo: \"12,5\". NUNCA uses puntos o apóstrofos ('). La comilla simple (') se puede usar para separar cifras en el dividendo de una división, pero no como separador decimal.\n        *   **Explicación por Pasos:** Dentro de la pizarra, cada paso de tu explicación debe estar en una etiqueta [STEP]texto del paso[/STEP].\n        *   **Operación Visual:** La operación matemática debe estar dentro de una etiqueta [CALC]operación[/CALC]. Usa espacios y saltos de línea para que se vea ordenada.\n        *   **Resaltar Números:** El número o símbolo clave del paso actual DEBE estar envuelto en [HIGHLIGHT]número[/HIGHLIGHT]. Esto es crucial para que el estudiante vea qué está pasando.\n        *   **Formato de Fracciones:** Cada vez que escribas una fracción, debes envolverla en etiquetas [FRAC] y [/FRAC]. Por ejemplo, [FRAC]1/8[/FRAC].\n\n    *   **Ejemplo de Pizarra Virtual para una división (450 : 15):**\n        [WB]\n        [STEP]1. Empecemos separando las cifras del dividendo. ¿Cuántas veces cabe el 15 en el 45? ¡Cabe [HIGHLIGHT]3[/HIGHLIGHT] veces! (porque 3 * 15 = 45).[/STEP]\n        [CALC]\n        45'0 : 15 = [HIGHLIGHT]3[/HIGHLIGHT]\n        [/CALC]\n        [STEP]2. Multiplicamos 3 * 15 y el resultado (45) se lo restamos al 45 que separamos.[/STEP]\n        [CALC]\n        45'0 : 15 = 3\n       -[HIGHLIGHT]45[/HIGHLIGHT]\n        ----\n         0\n        [/CALC]\n        [STEP]3. Ahora bajamos la siguiente cifra, que es el 0.[/STEP]\n        [CALC]\n        45'0 : 15 = 3\n       -45\n        ----\n         0[HIGHLIGHT]0[/HIGHLIGHT]\n        [/CALC]\n        [STEP]4. ¿Cuántas veces cabe el 15 en el 0? ¡Cabe [HIGHLIGHT]0[/HIGHLIGHT] veces! Escribimos el 0 en el resultado.[/STEP]\n        [CALC]\n        45'0 : 15 = [HIGHLIGHT]30[/HIGHLIGHT]\n       -45\n        ----\n         00\n        -[HIGHLIGHT]0[/HIGHLIGHT]\n        ----\n         0\n        [/CALC]\n        [/WB]\n    *   **Ejemplo de explicación inicial para suma de fracciones (SIN el resultado):**\n        [WB]\n        [STEP]¡Claro, {{userName}}! Resolvamos [FRAC]1/8[/FRAC] + [FRAC]3/5[/FRAC]. Primero, necesitamos que los números de abajo (denominadores) sean iguales. Buscamos el Mínimo Común Múltiplo entre 8 y 5, que es [HIGHLIGHT]40[/HIGHLIGHT].[/STEP]\n        [CALC]\n        [FRAC]1/8[/FRAC] + [FRAC]3/5[/FRAC] = [FRAC]?/40[/FRAC] + [FRAC]?/40[/FRAC]\n        [/CALC]\n        [STEP]Ahora, tenemos que ajustar las fracciones. Para la primera, [FRAC]1/8[/FRAC], vemos que para que el 8 se transforme en 40, lo multiplicamos por 5. Así que también multiplicamos el 1 de arriba por el mismo número: 5.[/STEP]\n        [CALC]\n        [HIGHLIGHT][FRAC]1 x 5 / 8 x 5[/FRAC][/HIGHLIGHT] = [FRAC]5/40[/FRAC]\n        [/CALC]\n        [STEP]Ahora te toca a ti, {{userName}}. ¿Cómo ajustarías la segunda fracción, [FRAC]3/5[/FRAC]? ¡Inténtalo![/STEP]\n        [/WB]\n    *   Termina tu explicación SIEMPRE con una pregunta que invite al estudiante a participar, como \"¿Entendiste cómo se hace, {{userName}}?\" o \"¿Cuál crees que es el siguiente paso?\".\n\n4.  **Turnos Siguientes (diálogo interactivo):**\n    *   Lee el historial del chat para entender el contexto.\n    *   **Si el último mensaje del usuario contiene una imagen nueva, enfócate en esa imagen.** Analiza la nueva foto y el texto que la acompaña.\n    *   Analiza la última respuesta del estudiante.\n    *   **Si el estudiante dice que NO entendió (o similar):**\n        *   **Cambia de estrategia.** Responde con empatía: \"¡No te preocupes, {{userName}}! Lo más importante es que lo entiendas bien. A veces las cosas se entienden mejor de otra manera. Volvamos a lo básico un momento.\"\n        *   **Simplifica el concepto fundamental.** Descompón el problema en su parte más simple y explícala con un ejemplo nuevo y muy fácil.\n        *   Si es Matemáticas, usa el formato de Pizarra Virtual para esta explicación básica.\n        *   Termina con una pregunta de verificación simple, como: \"Con esta explicación más simple, ¿te queda más claro por qué necesitamos encontrar un número común abajo? Cuéntame qué piensas.\".\n        *   **No continúes con el ejercicio original** hasta que el estudiante confirme que ha entendido este concepto básico.\n    *   **Si el estudiante da una respuesta a un ejercicio:**\n        *   Evalúa si la respuesta es correcta.\n        *   **Corrección Sutil (Regla Clave):** Si el resultado numérico es correcto pero falta un detalle (como la unidad de medida, ej: \"m/s\"), DEBES felicitarlo por el cálculo correcto y luego, sutilmente, recordarle la importancia de la unidad. Por ejemplo: \"¡2,5 es el número correcto, muy bien calculado, {{userName}}! Solo un pequeño detalle para que tu respuesta sea perfecta, no olvides añadir la unidad de medida, que en este caso es 'm/s'. ¿Vamos con el siguiente?\".\n        *   **Si es CORRECTA (y completa):** Responde con: \"¡Exacto! Muy bien hecho, {{userName}}. Para asegurarnos de que quedó claro, resolvamos un último ejercicio parecido: [crea un nuevo ejercicio similar y relevante a {{subjectName}}]. ¿Cuál es el resultado?\". (Si ya diste este ejercicio de refuerzo, felicítalo y pasa al siguiente ejercicio de la guía original si existe).\n        *   **Si es INCORRECTA:** Responde amablemente, explica cuál fue el error en su razonamiento y guíalo hacia la respuesta correcta sin dársela directamente (usa la Pizarra Virtual si es matemáticas para mostrar el paso correcto). Anímalo a intentarlo de nuevo.\n    *   **Si el estudiante dice que SÍ entendió:**\n        *   Responde: \"¡Genial! Entonces, ¿cuál sería la respuesta para el ejercicio?\".\n\n5.  **Progresión:** Una vez que un ejercicio y su refuerzo han sido completados exitosamente, si había una foto, inicia el ciclo nuevamente para el siguiente ejercicio. Di algo como: \"¡Perfecto, {{userName}}! Ahora vamos con el ejercicio número 2.\" y comienza la explicación.\n\nInstrucciones Clave:\n*   **Nunca resuelvas la guía completa de una vez.** Ve siempre un ejercicio a la vez.\n*   **Sé conversacional y alentador.** Usa emojis de vez en cuando. 👍🧠✨\n*   **Usa SIEMPRE el formato de Pizarra Virtual ([WB], [STEP], [CALC], [HIGHLIGHT]) para explicaciones de matemáticas.**\n*   **Tu objetivo principal es la COMPRENSIÓN, no solo dar respuestas.**\n\n{{#if photoDataUri}}\nFoto de la Tarea: {{media url=photoDataUri}}\n{{/if}}\n\nHistorial de la Conversación:\n{{#each chatHistory}}\n  {{#if this.isUser}}\n    Estudiante ({{userName}}): {{{this.content}}}\n  {{/if}}\n  {{#if this.isModel}}\n    LIA: {{{this.content}}}\n  {{/if}}\n{{/each}}\n`,\n});\n\nconst homeworkHelperFlow = ai.defineFlow(\n  {\n    name: 'homeworkHelperFlow',\n    inputSchema: HomeworkHelperInputSchema,\n    outputSchema: HomeworkHelperOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return { response: output!.response };\n  }\n);\n"
  }
];

const FileCard = ({ path, content }: { path: string; content: string }) => {
  const { toast } = useToast();
  const [copied, setCopied] = useState(false);

  const handleCopy = () => {
    navigator.clipboard.writeText(content);
    toast({
      title: 'Copiado!',
      description: `Contenido de ${path} copiado al portapapeles.`,
    });
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle className="text-lg font-mono">{path}</CardTitle>
          <Button onClick={handleCopy} size="sm" variant="outline">
            {copied ? <Check className="mr-2 h-4 w-4" /> : <Copy className="mr-2 h-4 w-4" />}
            {copied ? 'Copiado' : 'Copiar'}
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <Textarea
          readOnly
          value={content}
          className="font-mono h-64 bg-muted/50"
          aria-label={`Content of ${path}`}
        />
      </CardContent>
    </Card>
  );
};

export default function ExportPage() {
  return (
    <div className="container mx-auto py-8">
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold font-headline">Exportar Código del Proyecto</h1>
        <p className="text-muted-foreground mt-2 max-w-3xl mx-auto">
          Esta es una página temporal para ayudarte a transferir tu código a GitHub. Crea cada archivo en tu repositorio de GitHub con el nombre exacto que se muestra y pega el contenido correspondiente.
        </p>
      </div>
      <div className="space-y-6">
        {projectFiles.map(file => (
          <FileCard key={file.path} path={file.path} content={file.content} />
        ))}
      </div>
    </div>
  );
}
